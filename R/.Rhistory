plot = recordPlot()
C_filledcontour(plot)
length(x)
length(y)
87 * 61
FixupCol(plot.info[[6]])
length(z)
out
sc
length(sc)
source('C:/Users/yeamin/Desktop/mproject/loading.r')
ff()
plot = recordPlot()
C_filledcontour(plot)
x[1]
y[59]
sc[22]
nx
source('C:/Users/yeamin/Desktop/mproject/loading.r')
ff()
plot = recordPlot()
C_filledcontour(plot)
i
j
x[1]
z[i + (j) * nx]
i = 1
j = 59; k = 22
z[i + (j) * nx]
z[(i + 1) + (j + 1) * nx]
z[i + (j + 1) * nx
]
z[i + (j) * nx]
FindPolygonVertices(low = sc[k], high = sc[k + 1],
x1 = x[i], x2 = x[i + 1],
y1 = y[j], y2 = y[j + 1],
z11 = z[i + (j) * nx],
z21 = z[(i + 1) + (j) * nx],
z12 = z[i + (j + 1) * nx],
z22 = z[(i + 1) + (j + 1) * nx],
x = px, y = py, z = pz, npt = npt)
px = py = pz = numeric(8)
FindPolygonVertices(low = sc[k], high = sc[k + 1],
x1 = x[i], x2 = x[i + 1],
y1 = y[j], y2 = y[j + 1],
z11 = z[i + (j) * nx],
z21 = z[(i + 1) + (j) * nx],
z12 = z[i + (j + 1) * nx],
z22 = z[(i + 1) + (j + 1) * nx],
x = px, y = py, z = pz, npt = npt)
x[i]
x[i + 1]
y1 = y[j]
y2 = y[j + 1]
z[i + (j) * nx]
z[(i + 1) + (j) * nx]
z[i + (j + 1) * nx]
z[(i + 1) + (j + 1) * nx]
sc[k]
sc[k + 1]
ff()
source('C:/Users/yeamin/Desktop/mproject/loading.r')
plot = recordPlot()
C_filledcontour(plot)
source('C:/Users/yeamin/Desktop/mproject/loading.r')
ff()
plot = recordPlot()
C_filledcontour(plot)
source('C:/Users/yeamin/Desktop/mproject/loading.r')
ff()
plot = recordPlot()
C_filledcontour(plot)
source('C:/Users/yeamin/Desktop/mproject/loading.r')
ff()
plot = recordPlot()
C_filledcontour(plot)
sc
sc[22]
C_filledcontour
source('C:/Users/yeamin/Desktop/mproject/loading.r')
ff()
plot = recordPlot()
C_filledcontour(plot)
ii
jj
kk
sc[kk]
sc[kk + 1]
x[ii]
x[ii + 1]
y[jj]
y[jj + 1]
z[ii + (jj) * nx]
z[(ii + 1) + (jj) * nx]
z[ii + (jj + 1) * nx]
z[(ii + 1) + (jj + 1) * nx]
FindPolygonVertices(low = sc[kk], high = sc[kk + 1],
x1 = x[ii], x2 = x[ii + 1],
y1 = y[jj], y2 = y[jj + 1],
z11 = z[ii + (jj) * nx],
z21 = z[(ii + 1) + (jj) * nx],
z12 = z[ii + (jj + 1) * nx],
z22 = z[(ii + 1) + (jj + 1) * nx],
x = px, y = py, z = pz, npt = npt)
debug(FindCutPoints)
FindPolygonVertices(low = sc[kk], high = sc[kk + 1],
x1 = x[ii], x2 = x[ii + 1],
y1 = y[jj], y2 = y[jj + 1],
z11 = z[ii + (jj) * nx],
z21 = z[(ii + 1) + (jj) * nx],
z12 = z[ii + (jj + 1) * nx],
z22 = z[(ii + 1) + (jj + 1) * nx],
x = px, y = py, z = pz, npt = npt)
x
z1
z2
high
z1 > high
z1 < low
z2 > high || z1 < low
z1
low
outs
out
undebug(z2 > high || z1 < low)
undebug()
undebug(FindCutPoints)
FindPolygonVertices(low = sc[kk], high = sc[kk + 1],
x1 = x[ii], x2 = x[ii + 1],
y1 = y[jj], y2 = y[jj + 1],
z11 = z[ii + (jj) * nx],
z21 = z[(ii + 1) + (jj) * nx],
z12 = z[ii + (jj + 1) * nx],
z22 = z[(ii + 1) + (jj + 1) * nx],
x = px, y = py, z = pz, npt = npt)
kk
ii
jj
kk
y[61]
y[62]
kk
nc
kk = 1
ii = 2
FindPolygonVertices(low = sc[kk], high = sc[kk + 1],
x1 = x[ii], x2 = x[ii + 1],
y1 = y[jj], y2 = y[jj + 1],
z11 = z[ii + (jj) * nx],
z21 = z[(ii + 1) + (jj) * nx],
z12 = z[ii + (jj + 1) * nx],
z22 = z[(ii + 1) + (jj + 1) * nx],
x = px, y = py, z = pz, npt = npt)
jj
ny
ii = 1
kk = 21
jj = 60
FindPolygonVertices(low = sc[kk], high = sc[kk + 1],
x1 = x[ii], x2 = x[ii + 1],
y1 = y[jj], y2 = y[jj + 1],
z11 = z[ii + (jj) * nx],
z21 = z[(ii + 1) + (jj) * nx],
z12 = z[ii + (jj + 1) * nx],
z22 = z[(ii + 1) + (jj + 1) * nx],
x = px, y = py, z = pz, npt = npt)
low = sc[kk]
y[jj]
y[jj + 1]
z[ii + (jj) * nx]
z[(ii + 1) + (jj) * nx]
z[ii + (jj + 1) * nx]
z[(ii + 1) + (jj + 1) * nx]
source('C:/Users/yeamin/Desktop/mproject/loading.r')
ff()
plot = recordPlot()
C_filledcontour(plot)
:(ny - 1)
1:(ny - 1)
C_filledcontour
z[(ii + 1) + (jj) * nx]
z[ii + (jj + 1) * nx]
ii + (jj + 1) * nx
length(z)
ii
jj
length(ny)
ny
z[ii + (jj + 2) * nx]
z[ii + (jj + 1) * nx]
ii + (jj + 1) * nx
ii + (jj + 2) * nx
(ii + 1) + (jj + 1) * nx
(ii + 1) + (jj + 2) * nx
(ii + 2) + (jj + 2) * nx
length(z)
ii
jj
z[(ii + 1) + (jj + 1) * nx]
dim(z)
nx
source('C:/Users/yeamin/Desktop/mproject/loading.r')
ff()
plot = recordPlot()
C_filledcontour(plot)
source('C:/Users/yeamin/Desktop/mproject/loading.r')
ff()
plot = recordPlot()
C_filledcontour(plot)
windows()
outss
source('C:/Users/yeamin/Desktop/mproject/loading.r')
ff()
plot = recordPlot()
C_filledcontour(plot)
windows()
ff()
plot = recordPlot()
a = matrix(1:4, nr = 2)
a
a[1]
a[1, 2]
z
dim(z)
length(z)
length(x)
a[2,1]
a
source('C:/Users/yeamin/Desktop/mproject/loading.r')
ff()
plot = recordPlot()
C_filledcontour(plot)
scol
length(scol)
windows()
ff = function(){
x <- 10*1:nrow(volcano)
y <- 10*1:ncol(volcano)
a <- expand.grid(1:20, 1:20)
b <- matrix(a[,1] + a[,2], 20)
filled.contour(x = 1:20, y = 1:20, z = b,
plot.axes = { axis(1); axis(2); points(10, 10) })
}
source('C:/Users/yeamin/Desktop/mproject/loading.r')
ff()
xx = recordPlot()
x = xx[[1]][[11]][[2]][[2]]
y = xx[[1]][[11]][[2]][[3]]
z = xx[[1]][[11]][[2]][[4]]
s = xx[[1]][[11]][[2]][[5]]
xt = rep(rep(x, each = length(y)), each = length(s))
yt = rep(rep(x, length(x)), each = length(s))
zt = rep(as.numeric(z), each = length(s))
st = rep(s, length(x) * length(y))
length(xt)
length(x)
length(x) * length(y)
(length(x) * length(y) - 1) * length(s)
(length(x) * length(y)) * (length(s) - 1)
xt[(length(x) * length(y)) * (length(s) - 1) : 8000]
xt
tail(xt)
(length(x) * length(y)) * (length(s) - 1) : 8000
xt[((length(x) * length(y)) * (length(s) - 1)) : 8000]
xi = ((length(x) * length(y)) * (length(s) - 1))
xi
ind = ((length(x) * length(y)) * (length(s) - 1))
xt = rep(rep(x, each = length(y)), each = length(s))[ind : 8000]
yt = rep(rep(x, length(x)), each = length(s))[ind : 8000]
zt = rep(as.numeric(z), each = length(s))[ind : 8000]
st = rep(s, length(x) * length(y))[ind : 8000]
xtop = xt[1:ind]
xbot = xt[(ind + 1): 8000]
length(xtop)
length(xbot)
xbot = xt[(400 + 1): 8000]
xtop = xt[1:ind]
xbot = xt[(400 + 1): 8000]
ytop = yt[1:ind]
ybot = yt[(400 + 1): 8000]
ztop = zt[1:ind]
zbot = zt[(400 + 1): 8000]
FindCutPoints(low, high, xtop, ytop, ztop, xbot, ybot, zbot)
low = 3; high = 4;
FindCutPoints(low, high, xtop, ytop, ztop, xbot, ybot, zbot)
library(gridGraphics)
library(gridGraphics)
testPersp = function(theta=120, phi = 20, expand = 0.5, col = 'White',
box = TRUE, border = 'orange',
ticktype = 'simple', nticks = 5, ...) {
x = seq(-10,10,length = 60)
y = seq(-10,10,length = 60)
f <- function(x, y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
z <- outer(x, y, f)
z[is.na(z)] <- 1
par(mar = c(2,2,2,2))
trans <- persp(x, y, z, theta = theta,
phi = phi, expand = expand,
col = col, box = box, border = border,
ticktype = ticktype, nticks = nticks, ...)
}
testPersp1 = function(theta=120, phi = 20, expand = 0.5, col = 'orange ',
box = TRUE, border = 'NA',
ticktype = 'simple', nticks = 5, ...) {
x = seq(-pi,pi,length = 45)
y = seq(-pi,pi,length = 45)
f <- function(x, y) { 1 + 3 * cos((x^2 + y^2) * 2) * exp(-(x^2 + y^2))}
z <- outer(x, y, f)
nrz <- nrow(z)
ncz <- ncol(z)
# color
jet.colors <- colorRampPalette( c("white",'yellow', "orange") )
nbcol <- 100
color <- jet.colors(nbcol)
zfacet <- z[-1, -1] + z[-1, -ncz] + z[-nrz, -1] + z[-nrz, -ncz]
facetcol <- cut(zfacet, nbcol)
par(mar = c(2,2,2,2))
expand = 0.5
trans <- persp(x, y, z, theta = theta,
phi = phi, expand = expand,
col = color[facetcol], box = box, border = border,
ticktype = ticktype, nticks = nticks, ...)
}
testPersp1()
testPersp1(shade = 0.5)
testPersp1(shade = 0.5, box = FALSE)
testPersp1 = function(theta=120, phi = 20, expand = 0.5, col = 'orange ',
box = TRUE, border = 'NA',
ticktype = 'simple', nticks = 5, ...) {
x = seq(-pi,pi,length = 45)
y = seq(-pi,pi,length = 45)
f <- function(x, y) { 1 + 3 * cos((x^2 + y^2) * 2) * exp(-(x^2 + y^2))}
z <- outer(x, y, f)
nrz <- nrow(z)
ncz <- ncol(z)
# color
jet.colors <- colorRampPalette( c('yellow') )
nbcol <- 100
color <- jet.colors(nbcol)
zfacet <- z[-1, -1] + z[-1, -ncz] + z[-nrz, -1] + z[-nrz, -ncz]
facetcol <- cut(zfacet, nbcol)
par(mar = c(2,2,2,2))
expand = 0.5
trans <- persp(x, y, z, theta = theta,
phi = phi, expand = expand,
col = color[facetcol], box = box, border = border,
ticktype = ticktype, nticks = nticks, ...)
}
testPersp1(shade = 0.5, box = FALSE)
testPersp1(shade = 0.5, box = FALSE, ltheta = 0)
testPersp1(shade = 0.5, box = FALSE)
testPersp1(shade = 0.5, box = FALSE, ltheta = 0)
testPersp1(shade = 0.5, box = FALSE, ltheta = 0, lphi = 90)
testPersp1(shade = 0.5, box = FALSE, ltheta = 0, lphi = 40)
testPersp1(shade = 0.5, box = FALSE, ltheta = 0, lphi = 45)
testPersp1(shade = 0.5, box = FALSE, ltheta = 0, lphi = 0)
testPersp1(shade = 0.5, box = FALSE, ltheta = 0, lphi = 10)
testPersp1(shade = 0.5, box = FALSE, ltheta = 0, lphi = 15)
testPersp1(shade = 0.5, box = TRUE, ltheta = 0, lphi = 15)
testPersp1(shade = 0.5, box = TRUE, ltheta = 0, lphi = 0)
testPersp1(shade = 0.7, box = TRUE, ltheta = 0, lphi = 0)
testPersp1 = function(theta=120, phi = 20, expand = 0.5, col = 'orange ',
box = TRUE, border = 'NA',
ticktype = 'simple', nticks = 5, ...) {
x = seq(-pi,pi,length = 45)
y = seq(-pi,pi,length = 45)
f <- function(x, y) { 1 + 3 * cos((x^2 + y^2) * 2) * exp(-(x^2 + y^2))}
z <- outer(x, y, f)
nrz <- nrow(z)
ncz <- ncol(z)
# color
jet.colors <- colorRampPalette( c('white') )
nbcol <- 100
color <- jet.colors(nbcol)
zfacet <- z[-1, -1] + z[-1, -ncz] + z[-nrz, -1] + z[-nrz, -ncz]
facetcol <- cut(zfacet, nbcol)
par(mar = c(2,2,2,2))
expand = 0.5
trans <- persp(x, y, z, theta = theta,
phi = phi, expand = expand,
col = color[facetcol], box = box, border = border,
ticktype = ticktype, nticks = nticks, ...)
}
testPersp1(shade = 0.7, box = TRUE, ltheta = 0, lphi = 0)
testPersp1(shade = 0.7, box = TRUE, ltheta = 0, lphi = 90)
testPersp1(shade = 0.7, box = TRUE, ltheta = 0, lphi = 50)
testPersp1(shade = 0.7, box = TRUE, ltheta = 0, lphi = 0)
testPersp1(shade = 0.7, box = TRUE, ltheta = 60, lphi = 0)
testPersp1(shade = 0.7, box = TRUE, ltheta = 0, lphi = 0)
testPersp1(shade = 0.7, box = TRUE, ltheta = 10, lphi = 0)
testPersp1(shade = 0.7, box = TRUE, ltheta = 30, lphi = 0)
testPersp1(shade = 0.7, box = TRUE, ltheta = 40, lphi = 0)
testPersp1(shade = 0.7, box = TRUE, ltheta = 50, lphi = 0)
testPersp1(shade = 0.7, box = TRUE, ltheta = 10, lphi = 0)
testPersp1(shade = 0.7, box = TRUE, ltheta = 90, lphi = 0)
testPersp1(shade = 0.7, box = TRUE, ltheta = 1000, lphi = 0)
testPersp1(shade = 0.7, box = TRUE, ltheta = 90, lphi = 0)
testPersp1(shade = 0.7, box = TRUE,theta = 30, ltheta = 90, lphi = 0)
testPersp1(shade = 0.7, box = TRUE,theta = 0, ltheta = 90, lphi = 0)
testPersp1(shade = 0.7, box = TRUE,theta = 0, ltheta = 0, lphi = 0)
testPersp1(shade = 0.7, box = TRUE,theta = 30, ltheta = 0, lphi = 0)
besselK
besselI
?besselI
nus <- c(0:5, 10, 20)
x <- seq(0, 4, length.out = 501)
besselI(x, nu = nu)
besselI(x, nu = nus)
nus <- c(0:5, 10, 20)
x <- seq(0, 4, length.out = 501)
plot(x, x, ylim = c(0, 6), ylab = "", type = "n",
main = "Bessel Functions  I_nu(x)")
for(nu in nus) lines(x, besselI(x, nu = nu), col = nu + 2)
legend(0, 6, legend = paste("nu=", nus), col = nus + 2, lwd = 1)
x <- seq(0, 40, length.out = 801); yl <- c(-.8, .8)
plot(x, x, ylim = yl, ylab = "", type = "n",
main = "Bessel Functions  J_nu(x)")
for(nu in nus) lines(x, besselJ(x, nu = nu), col = nu + 2)
legend(32, -.18, legend = paste("nu=", nus), col = nus + 2, lwd = 1)
BesselExpand
f3 = function()
{
x <- 10*1:nrow(volcano)
y <- 10*1:ncol(volcano)
filled.contour(x, y, volcano, color = terrain.colors,
plot.title = title(main = "The Topography of Maunga Whau",
xlab = "Meters North", ylab = "Meters West"),
plot.axes = { axis(1, seq(100, 800, by = 100))
axis(2, seq(100, 600, by = 100)) },
key.title = title(main = "Height\n(meters)"),
key.axes = axis(4, seq(90, 190, by = 10)))  # maybe also asp = 1
mtext(paste("filled.contour(.) from", R.version.string),
side = 1, line = 4, adj = 1, cex = .66)
# system.time(grid.echo())
}
source('C:/Users/yeamin/Desktop/mproject/gridGraphics_script/loading.R')
f3()
grid.echo()
libary(grid)
library(grid)
grid.echo()
View(C_title)
source('loading.R')
setwd('H:/Documents/MasterProject-master/MasterProject') ## at home
source('C:/Users/yeamin/Desktop/mproject/gridGraphics_script/loading.R')
p3 = function(){
x <- seq(-10, 10, length= 30)
y <- x
f <- function(x, y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
z <- outer(x, y, f)
z[is.na(z)] <- 1
op <- par(bg = "white")
persp(x, y, z, theta = 30, phi = 30, expand = 0.5, col = "lightblue")
persp(x, y, z, theta = 30, phi = 30, expand = 0.5, col = "lightblue",
ltheta = 120, shade = 0.75, ticktype = "detailed",
xlab = "X", ylab = "Y", zlab = "Sinc( r )"
) -> res
round(res, 3)
# (2) Add to existing persp plot - using trans3d() :
xE <- c(-10,10); xy <- expand.grid(xE, xE)
graphics:::points(trans3d(xy[,1], xy[,2], 6, pmat = res), col = 2, pch = 16)
graphics:::lines (trans3d(x, y = 10, z = 6 + sin(x), pmat = res), col = 3)
phi <- seq(0, 2*pi, len = 201)
r1 <- 7.725 # radius of 2nd maximum
xr <- r1 * cos(phi)
yr <- r1 * sin(phi)
graphics:::lines(trans3d(xr,yr, f(xr,yr), res), col = "pink", lwd = 2)
## (no hidden lines)
}
source('C:/Users/yeamin/Desktop/mproject/gridGraphics_script/loading.R')
p3()
windows()
p3()
grid.echo()
p3 = function(){
x <- seq(-10, 10, length= 30)
y <- x
f <- function(x, y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
z <- outer(x, y, f)
z[is.na(z)] <- 1
op <- par(bg = "white")
persp(x, y, z, theta = 30, phi = 30, expand = 0.5, col = "lightblue")
persp(x, y, z, theta = 30, phi = 30, expand = 0.5, col = "lightblue",
ltheta = 120, shade = 0.75, ticktype = "detailed",
xlab = "X", ylab = "Y", zlab = "Sinc( r )"
) -> res
round(res, 3)
# (2) Add to existing persp plot - using trans3d() :
xE <- c(-10,10); xy <- expand.grid(xE, xE)
graphics:::points(trans3d(xy[,1], xy[,2], 6, pmat = res), col = 2, pch = 16)
graphics:::lines (trans3d(x, y = 10, z = 6 + sin(x), pmat = res), col = 3)
phi <- seq(0, 2*pi, len = 201)
r1 <- 7.725 # radius of 2nd maximum
xr <- r1 * cos(phi)
yr <- r1 * sin(phi)
graphics:::lines(trans3d(xr,yr, f(xr,yr), res), col = "pink", lwd = 2)
## (no hidden lines)
}
p3()
grid.echo()
source('C:/Users/yeamin/Desktop/mproject/gridGraphics_script/loading.R')
p3()
grid.echo()
p3()
grid.echo()
perep
persp
persp.defult
filled.contour.default
grid.echo.default
grid.echo.default
q()
