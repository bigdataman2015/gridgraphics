{
arrow = arrow(angle = angle, length = unit(0.1, "in"),
ends = "last", type = "open")
grid.lines(x, y, arrow = arrow, gp = gpar(col = 'red'))
}
pp(c(0.15, 0.25), c(0.5, 0.5), 45)
pp(c(0.50, 0.3), c(0.75, 0.55), 45)
pp(c(0.6, 0.85), c(0.75, 0.55), 45)
pp(c(0.50, 0.3), c(0.25, 0.45), 45)
pp(c(0.6, 0.85), c(0.25, 0.45), 45)
pp(c(0.35, 0.80), c(0.5, 0.5), 45)
install.packages('nlme')
library(nlme)
help(package = 'nlme')
library(MASS)
data(oats)
names(oats) = c('block', 'variety', 'nitrogen', 'yield')
oats$mainplot = oats$variety
oats$subplot = oats$nitrogen
summary(oats)
m1.nlme = lme(yield ~ variety*nitrogen,
random = ~ 1|block/mainplot,
data = oats)
summary(m1.nlme)
summary(m1.nlme)
oats$variety
oats$nitrogen
anova(m1.nlme)
oats
q()
q()
plot(1,1)
## generate the name on that file
setwd('C:/Users/yeamin/Desktop/220/220-2017')
listfile = list.files('lab7')
idLocation = gregexpr('_[0-9]*_', listfile)
idStart = unlist(lapply(idLocation, function(x) x[1]))
## only the first pattern is the id
mulidLength = lapply(idLocation, attr, 'match.length')
idLength = unlist(lapply(mulidLength, function(x) x[1]))
id.prep = substring(listfile, idStart, idStart + idLength)
id = gsub('_', '', id.prep)
summit_id = unique(as.numeric(substring(id, 1, nchar(id) - 1)))
idname = read.csv('idname.csv')
full_id = unique(idname[-1,2])
full_name = unique(as.character(idname[-1,1]))
summit_name = full_name[match(summit_id, full_id)]
cat(summit_id, sep = '\n')
cat(summit_name, sep = '\n')
data,=c(8,13,1,6,4,3,4,2,0,1,
0,0,0,1,0,1,0,0,0,6,
3,5,4,3,1,0,0,2,1,2,
2,2,0,0,1,1,2,2,1,6,
2,5,2,5,0,0,0,1,0,1,
1,4,2,1,1,1,1,0,2,2,
0,2,0,0,0,0,2,0,0,0,
1,0,2,3)
data = c(8,13,1,6,4,3,4,2,0,1,
0,0,0,1,0,1,0,0,0,6,
3,5,4,3,1,0,0,2,1,2,
2,2,0,0,1,1,2,2,1,6,
2,5,2,5,0,0,0,1,0,1,
1,4,2,1,1,1,1,0,2,2,
0,2,0,0,0,0,2,0,0,0,
1,0,2,3)
f1 = function(par)
{
-sum(log(dpois(data, par)))
}
optim(mean(data), f1)
mean(data)
optim(1, f1)
f2 = function(par)
{
-sum(log(par[1] + (1 - par[1]) * dpois(data, par)))
}
f2 = function(par)
{
-sum(log(par[1] + (1 - par[1]) * dpois(data, par[2])))
}
optim(c(0.5, 1), f2)
optim(c(0.5, 10.2), f2)
optim(c(0.5, 0.1), f2)
optim(c(0.1, 0.1), f2)
f2(0.5, 2)
f2(c(0.5, 2))
f2(c(0.5, 3))
f2(c(0.5, 10))
f2(c(0.5, 100))
f2(c(0.5, 1000000))
par = c(0.5, 1)
log(par[1] + (1 - par[1]) * dpois(data, par[2])
)
sum(log(par[1] + (1 - par[1]) * dpois(data, par[2]))
)
optim(1, f1)
optim(c(0.1, 0.1), f2)
sum(log(par[1] + (1 - par[1]) * dpois(data, par[2])))
f2 = function(par)
{
sum(log(par[1] + (1 - par[1]) * dpois(data, par[2])))
}
optim(c(0.1, 0.1), f2)
f2 = function(par)
{
-sum(log(par[1] + (1 - par[1]) * dpois(data, par[2])))
}
optim(c(0.1, 0.1), f2)
?dpois
par[1] + (1 - par[1]) * dpois(data, par[2])
par[2]
dpois(data, par[2])
par[2]
-sum(log(d))
f2 = function(par)
{
d = ifelse(data == 0,
par[1] + (1 - par[1]) * dpois(data, par[2]),
(1 - par[1]) * dpois(data, par[2]))
-sum(log(d))
}
optim(c(0.1, 0.1), f2)
optim(c(0.5, 1), f2)
dnetbin
-sum(log(dnbinom(data, par[1], par[2])))
f3 = function(par)
{
-sum(log(dnbinom(data, par[1], par[2])))
}
optim(c(2, 3), f3)
?dnbinom
optim(c(2, 0.5), f3)
resid
?resid
f1.out = optim(1, f1)
f3.out = optim(c(2, 0.5), f3)
pchi1 = sum((data - f1.out$par)^2 /  f1.out$par)
pchi1
f2.out = optim(c(0.5, 1), f2)
zipE = (1 - f2.out$par[1]) * f2.out$par[2]
pchi2 = sum((data - zipE)^2 /  zipE)
pchi2
f3.out = optim(c(2, 0.5), f3)
p = f3.out$par[2]
r = f3.out$par[1]
nbE = p * r / (1 - p)
pchi3 = sum((data - nbE)^2 / nbE)
pchi3
(data - nbE)^2 / nbE
nbE
data
AIC = 2 * k - 2 * loglik
k = 1; loglik = f1.out$value
AIC = 2 * k - 2 * loglik
AIC
k = 2; loglik = f1.out$value
AIC = 2 * k - 2 * loglik
AIC
k = 2; loglik = f2.out$value
AIC = 2 * k - 2 * loglik
AIC
k = 2; loglik = f3.out$value
AIC = 2 * k - 2 * loglik
AIC
3ÔºÅ
3!
factorial(10)
lgamma
lgamma(10)
?lgamma
log(factorial(10))
log(factorial(9))
f4 = function(n){
x = c(34, 30, 33, n)
N = sum(x)
loglik = log(factorial(n)) - sum(log(factorial(x))) + sum(x * log(x/N))
}
f4(n)
f4(3)
f4 = function(n){
x = c(34, 30, 33, n)
N = sum(x)
-log(factorial(n)) - sum(log(factorial(x))) + sum(x * log(x/N))
}
f4(3)
f4(10)
f4(30)
f4(300)
f4(100)
f4 = function(n){
x = c(34, 30, 33, n)
N = sum(x)
-log(factorial(N)) - sum(log(factorial(x))) + sum(x * log(x/N))
}
f4(100)
f4(10)
f4(1)
f4 = function(n){
x = c(34, 30, 33, n)
N = sum(x)
r1 = 64/N; r2 = (N - 64)/N
c1 = 67/N; c2 = (N - 67)/N
p = c(r1 * c1, r1 * c2, r2 * c1, r2 * c2)
-log(factorial(N)) - sum(log(factorial(x))) + sum(x * p)
}
f4(1)
f4(10)
optim(10, f4)
optim(10, f4, hessian = TRUE)
f4 = function(n){
x = c(34, 30, 33, n)
N = sum(x)
r1 = 64/N; r2 = (N - 64)/N
c1 = 67/N; c2 = (N - 67)/N
p = c(r1 * c1, r1 * c2, r2 * c1, r2 * c2)
-(log(factorial(N)) - sum(log(factorial(x))) + sum(x * p))
}
optim(10, f4, hessian = TRUE)
optim(10, f4)
opt = optim(10, f4)
control.list = list(label="n", est=opt$par, low=1, upp=300)
LRCI = plkhci(control.list, f4, "n")
library(Bh)
library(Bhat)
opt = optim(10, f4)
control.list = list(label="n", est=opt$par, low=1, upp=300)
LRCI = plkhci(control.list, f4, "n")
f4 = function(n){
x = c(34, 30, 33, n)
N = sum(x)
r1 = 64/N; r2 = (N - 64)/N
c1 = 67/N; c2 = (N - 67)/N
p = c(r1 * c1, r1 * c2, r2 * c1, r2 * c2)
-(lgamma(N + 1)) - sum(lgamma(x + 1))) + sum(x * p))
}
f4 = function(n){
x = c(34, 30, 33, n)
N = sum(x)
r1 = 64/N; r2 = (N - 64)/N
c1 = 67/N; c2 = (N - 67)/N
p = c(r1 * c1, r1 * c2, r2 * c1, r2 * c2)
-(lgamma(N + 1)) - sum(lgamma(x + 1)) + sum(x * p))
}
f4 = function(n){
x = c(34, 30, 33, n)
N = sum(x)
r1 = 64/N; r2 = (N - 64)/N
c1 = 67/N; c2 = (N - 67)/N
p = c(r1 * c1, r1 * c2, r2 * c1, r2 * c2)
-(lgamma(N + 1) - sum(lgamma(x + 1)) + sum(x * p))
}
library(Bhat)
opt = optim(10, f4)
opt
f4 = function(n){
x = c(34, 30, 33, n)
N = sum(x)
r1 = 64/N; r2 = (N - 64)/N
c1 = 67/N; c2 = (N - 67)/N
p = c(r1 * c1, r1 * c2, r2 * c1, r2 * c2)
-(lgamma(N + 1) - sum(lgamma(x + 1)) + sum(x * log(p)))
}
opt = optim(10, f4)
opt
control.list = list(label="n", est=opt$par, low=1, upp=300)
LRCI = plkhci(control.list, f4, "n")
zipVar = f2.out$par[2] * (1 - f2.out$par[1]) * (1 + f2.out$par[1] * f2.out$par[2])
pchi2 = sum((data - zipE)^2 / zipVar)
pchi2
nbE = p * r / (1 - p)
nbvar = p * 3 / (1 - p)^2
pchi3 = sum((data - nbE)^2 / nbvar)
pchi3
control.list = list(label="n", est=opt$par, low=1, upp=100)
LRCI = plkhci(control.list, f4, "n")
LRCI
LRCI
opt
data = c(10, 35)
model = glm(y ~ 1, family = poisson, offset = c(0, log(2)), data = data)
data = data,frame(y = c(10, 35))
model = glm(y ~ 1, family = poisson, offset = c(0, log(2)), data = data)
data = data,frame(y = c(10, 35))
data = data.frame(y = c(10, 35))
model = glm(y ~ 1, family = poisson, offset = c(0, log(2)), data = data)
model
logLik(model)
library(gridGraphics)
x = 1:3
y = 1:3
z = outer(x, y, "+")
z[1,1] = NA
col1 = c('NA', 'red', 'blue', 'brown')
col2 = c('red', 'NA', 'blue', 'brown')
windows()
setwd('C:/Users/yeamin/Desktop/mproject/gridGraphics_script')
source('loading.R')
persp(z, col = col2, shade = 0.5)
grid.echo()
1/NA
setwd('C:/Users/yeamin/Desktop/mproject/gridGraphics_script')
source('loading.R')
persp(z, col = col2, shade = 0.5)
grid.echo()
setwd('C:/Users/yeamin/Desktop/mproject/gridGraphics_script')
source('loading.R')
persp(z, col = col2, shade = 0.5)
grid.echo()
persp(z, col = col2, shade = 0.5)
setwd('C:/Users/yeamin/Desktop/mproject/gridGraphics_script')
source('loading.R')
persp(z, col = col2, shade = 0.5)
grid.echo()
rgb(1,1,1,0)
rgb2col(rgb(1,1,1,0))
col2rgb(rgb(1,1,1,0))
setwd('C:/Users/yeamin/Desktop/mproject/gridGraphics_script')
source('loading.R')
persp(z, col = col2, shade = 0.5)
grid.echo()
colRep
col2rgb(colRep)
col2rgb(colRep, alpha = TRUE)
colRep
setwd('C:/Users/yeamin/Desktop/mproject/gridGraphics_script')
source('loading.R')
persp(z, col = col2, shade = 0.5)
grid.echo()
setwd('C:/Users/yeamin/Desktop/mproject/gridGraphics_script')
source('loading.R')
persp(z, col = col2, shade = 0.5)
grid.echo()
setwd('C:/Users/yeamin/Desktop/mproject/gridGraphics_script')
source('loading.R')
persp(z, col = col2, shade = 0.5)
grid.echo()
setwd('C:/Users/yeamin/Desktop/mproject/gridGraphics_script')
source('loading.R')
persp(z, col = col2, shade = 0.5)
grid.echo()
setwd('C:/Users/yeamin/Desktop/mproject/gridGraphics_script')
source('loading.R')
persp(z, col = col2, shade = 0.5)
grid.echo()
setwd('C:/Users/yeamin/Desktop/mproject/gridGraphics_script')
source('loading.R')
persp(z, col = col2, shade = 0.5)
grid.echo()
setwd('C:/Users/yeamin/Desktop/mproject/gridGraphics_script')
source('loading.R')
persp(z, col = col2, shade = 0.5)
grid.echo()
setwd('C:/Users/yeamin/Desktop/mproject/gridGraphics_script')
source('loading.R')
persp(z, col = col2, shade = 0.5)
grid.echo()
setwd('C:/Users/yeamin/Desktop/mproject/gridGraphics_script')
source('loading.R')
persp(z, col = col2, shade = 0.5)
grid.echo()
setwd('C:/Users/yeamin/Desktop/mproject/gridGraphics_script')
source('loading.R')
persp(z, col = col2, shade = 0.5)
grid.echo()
setwd('C:/Users/yeamin/Desktop/mproject/gridGraphics_script')
source('loading.R')
persp(z, col = col2, shade = 0.5)
grid.echo()
is.finite(shade)
setwd('C:/Users/yeamin/Desktop/mproject/gridGraphics_script')
source('loading.R')
persp(z, col = col2, shade = 0.5)
grid.echo()
polygons
setwd('C:/Users/yeamin/Desktop/mproject/gridGraphics_script')
source('loading.R')
persp(z, col = col2, shade = 0.5)
grid.echo()
missingshade
z
setwd('C:/Users/yeamin/Desktop/mproject/gridGraphics_script')
source('loading.R')
persp(z, col = col2, shade = 0.5)
grid.echo()
setwd('C:/Users/yeamin/Desktop/mproject/gridGraphics_script')
source('loading.R')
persp(z, col = col2, shade = 0.5)
grid.echo()
pout
setwd('C:/Users/yeamin/Desktop/mproject/gridGraphics_script')
source('loading.R')
persp(z, col = col2, shade = 0.5)
grid.echo()
eShade
setwd('C:/Users/yeamin/Desktop/mproject/gridGraphics_script')
source('loading.R')
persp(z, col = col2, shade = 0.5)
grid.echo()
eIndex
eShade
eShade
eShade * 4
a = c(0, 1, 1, 1)
a
cumsum(a)
cumsum(a) * 4
cumsum(a) * 4 + 1:4
cumsum(a) * 4 + rep(1:4, 4)
rep(1:4,4)
rep(cumsum(a) * 4, eahc = 4) + rep(1:4, 4)
rep(cumsum(a) * 4, each = 4) + rep(1:4, 4)
setwd('C:/Users/yeamin/Desktop/mproject/gridGraphics_script')
source('loading.R')
persp(z, col = col2, shade = 0.5)
grid.echo()
misshade
cumsum(misshade)
misshade
setwd('C:/Users/yeamin/Desktop/mproject/gridGraphics_script')
source('loading.R')
persp(z, col = col2, shade = 0.5)
grid.echo()
setwd('C:/Users/yeamin/Desktop/mproject/gridGraphics_script')
source('loading.R')
persp(z, col = col2, shade = 0.5)
grid.echo()
setwd('C:/Users/yeamin/Desktop/mproject/gridGraphics_script')
source('loading.R')
persp(z, col = col2, shade = 0.5)
grid.echo()
setwd('C:/Users/yeamin/Desktop/mproject/gridGraphics_script')
source('loading.R')
persp(z, col = col2, shade = 0.5)
grid.echo()
misindex
persp(z, col = col2, shade = 0.5)
grid.echo()
persp(z, col = col2, shade = 0.5)
grid.echo()
pout
setwd('C:/Users/yeamin/Desktop/mproject/gridGraphics_script')
source('loading.R')
persp(z, col = col2, shade = 0.5)
grid.echo()
persp(z, col = col2, shade = 0.5)
grid.echo()
persp(z, col = col2, shade = 0.5)
grid.echo()
persp(z, col = col1, shade = 0.5)
grid.echo()
persp(z, col = col2, shade = 0.5)
grid.echo()
unlikelyTest = function(x)
{
x = 1:3
y = 1:3
z = outer(x, y, "+")
z[1,1] = NA
cols = list(
col1 = c('NA', 'red', 'blue', 'brown')
col2 = c('red', 'NA', 'blue', 'brown')
)
setwd('C:/Users/yeamin/Desktop/mproject/gridGraphics_script')
source('loading.R')
persp(z, col = cols[[x]], shade = 0.5)
grid.echo()
}
cols = list(
col1 = c('NA', 'red', 'blue', 'brown')
col2 = c('red', 'NA', 'blue', 'brown')
)
cols = list(
col1 = c('NA', 'red', 'blue', 'brown'),
col2 = c('red', 'NA', 'blue', 'brown')
)
unlikelyTest = function(x)
{
x = 1:3
y = 1:3
z = outer(x, y, "+")
z[1,1] = NA
cols = list(
col1 = c('NA', 'red', 'blue', 'brown'),
col2 = c('red', 'NA', 'blue', 'brown')
)
setwd('C:/Users/yeamin/Desktop/mproject/gridGraphics_script')
source('loading.R')
persp(z, col = cols[[x]], shade = 0.5)
grid.echo()
}
unlikelyTest(1)
cols = list(
col1 = c('NA', 'red', 'blue', 'brown'),
col2 = c('red', 'NA', 'blue', 'brown')
)
cols[[1]]
x = 1
unlikelyTest = function(i)
{
x = 1:3
y = 1:3
z = outer(x, y, "+")
z[1,1] = NA
cols = list(
col1 = c('NA', 'red', 'blue', 'brown'),
col2 = c('red', 'NA', 'blue', 'brown')
)
persp(z, col = cols[[i]], shade = 0.5)
}
unlikelyTest(1)
install.packages("C:/Users/yeamin/Desktop/mproject/gridGraphics_0.2.tar.gz", repos = NULL, type = "source")
q()
