z21 = z[(i + 1) + (j) * nx],
z12 = z[i + (j + 1) * nx],
z22 = z[(i + 1) + (j + 1) * nx],
x = px, y = py, z = pz, npt = npt)
px = py = pz = numeric(8)
FindPolygonVertices(low = sc[k], high = sc[k + 1],
x1 = x[i], x2 = x[i + 1],
y1 = y[j], y2 = y[j + 1],
z11 = z[i + (j) * nx],
z21 = z[(i + 1) + (j) * nx],
z12 = z[i + (j + 1) * nx],
z22 = z[(i + 1) + (j + 1) * nx],
x = px, y = py, z = pz, npt = npt)
x[i]
x[i + 1]
y1 = y[j]
y2 = y[j + 1]
z[i + (j) * nx]
z[(i + 1) + (j) * nx]
z[i + (j + 1) * nx]
z[(i + 1) + (j + 1) * nx]
sc[k]
sc[k + 1]
ff()
source('C:/Users/yeamin/Desktop/mproject/loading.r')
plot = recordPlot()
C_filledcontour(plot)
source('C:/Users/yeamin/Desktop/mproject/loading.r')
ff()
plot = recordPlot()
C_filledcontour(plot)
source('C:/Users/yeamin/Desktop/mproject/loading.r')
ff()
plot = recordPlot()
C_filledcontour(plot)
source('C:/Users/yeamin/Desktop/mproject/loading.r')
ff()
plot = recordPlot()
C_filledcontour(plot)
sc
sc[22]
C_filledcontour
source('C:/Users/yeamin/Desktop/mproject/loading.r')
ff()
plot = recordPlot()
C_filledcontour(plot)
ii
jj
kk
sc[kk]
sc[kk + 1]
x[ii]
x[ii + 1]
y[jj]
y[jj + 1]
z[ii + (jj) * nx]
z[(ii + 1) + (jj) * nx]
z[ii + (jj + 1) * nx]
z[(ii + 1) + (jj + 1) * nx]
FindPolygonVertices(low = sc[kk], high = sc[kk + 1],
x1 = x[ii], x2 = x[ii + 1],
y1 = y[jj], y2 = y[jj + 1],
z11 = z[ii + (jj) * nx],
z21 = z[(ii + 1) + (jj) * nx],
z12 = z[ii + (jj + 1) * nx],
z22 = z[(ii + 1) + (jj + 1) * nx],
x = px, y = py, z = pz, npt = npt)
debug(FindCutPoints)
FindPolygonVertices(low = sc[kk], high = sc[kk + 1],
x1 = x[ii], x2 = x[ii + 1],
y1 = y[jj], y2 = y[jj + 1],
z11 = z[ii + (jj) * nx],
z21 = z[(ii + 1) + (jj) * nx],
z12 = z[ii + (jj + 1) * nx],
z22 = z[(ii + 1) + (jj + 1) * nx],
x = px, y = py, z = pz, npt = npt)
x
z1
z2
high
z1 > high
z1 < low
z2 > high || z1 < low
z1
low
outs
out
undebug(z2 > high || z1 < low)
undebug()
undebug(FindCutPoints)
FindPolygonVertices(low = sc[kk], high = sc[kk + 1],
x1 = x[ii], x2 = x[ii + 1],
y1 = y[jj], y2 = y[jj + 1],
z11 = z[ii + (jj) * nx],
z21 = z[(ii + 1) + (jj) * nx],
z12 = z[ii + (jj + 1) * nx],
z22 = z[(ii + 1) + (jj + 1) * nx],
x = px, y = py, z = pz, npt = npt)
kk
ii
jj
kk
y[61]
y[62]
kk
nc
kk = 1
ii = 2
FindPolygonVertices(low = sc[kk], high = sc[kk + 1],
x1 = x[ii], x2 = x[ii + 1],
y1 = y[jj], y2 = y[jj + 1],
z11 = z[ii + (jj) * nx],
z21 = z[(ii + 1) + (jj) * nx],
z12 = z[ii + (jj + 1) * nx],
z22 = z[(ii + 1) + (jj + 1) * nx],
x = px, y = py, z = pz, npt = npt)
jj
ny
ii = 1
kk = 21
jj = 60
FindPolygonVertices(low = sc[kk], high = sc[kk + 1],
x1 = x[ii], x2 = x[ii + 1],
y1 = y[jj], y2 = y[jj + 1],
z11 = z[ii + (jj) * nx],
z21 = z[(ii + 1) + (jj) * nx],
z12 = z[ii + (jj + 1) * nx],
z22 = z[(ii + 1) + (jj + 1) * nx],
x = px, y = py, z = pz, npt = npt)
low = sc[kk]
y[jj]
y[jj + 1]
z[ii + (jj) * nx]
z[(ii + 1) + (jj) * nx]
z[ii + (jj + 1) * nx]
z[(ii + 1) + (jj + 1) * nx]
source('C:/Users/yeamin/Desktop/mproject/loading.r')
ff()
plot = recordPlot()
C_filledcontour(plot)
:(ny - 1)
1:(ny - 1)
C_filledcontour
z[(ii + 1) + (jj) * nx]
z[ii + (jj + 1) * nx]
ii + (jj + 1) * nx
length(z)
ii
jj
length(ny)
ny
z[ii + (jj + 2) * nx]
z[ii + (jj + 1) * nx]
ii + (jj + 1) * nx
ii + (jj + 2) * nx
(ii + 1) + (jj + 1) * nx
(ii + 1) + (jj + 2) * nx
(ii + 2) + (jj + 2) * nx
length(z)
ii
jj
z[(ii + 1) + (jj + 1) * nx]
dim(z)
nx
source('C:/Users/yeamin/Desktop/mproject/loading.r')
ff()
plot = recordPlot()
C_filledcontour(plot)
source('C:/Users/yeamin/Desktop/mproject/loading.r')
ff()
plot = recordPlot()
C_filledcontour(plot)
windows()
outss
source('C:/Users/yeamin/Desktop/mproject/loading.r')
ff()
plot = recordPlot()
C_filledcontour(plot)
windows()
ff()
plot = recordPlot()
a = matrix(1:4, nr = 2)
a
a[1]
a[1, 2]
z
dim(z)
length(z)
length(x)
a[2,1]
a
source('C:/Users/yeamin/Desktop/mproject/loading.r')
ff()
plot = recordPlot()
C_filledcontour(plot)
scol
length(scol)
windows()
ff = function(){
x <- 10*1:nrow(volcano)
y <- 10*1:ncol(volcano)
a <- expand.grid(1:20, 1:20)
b <- matrix(a[,1] + a[,2], 20)
filled.contour(x = 1:20, y = 1:20, z = b,
plot.axes = { axis(1); axis(2); points(10, 10) })
}
source('C:/Users/yeamin/Desktop/mproject/loading.r')
ff()
xx = recordPlot()
x = xx[[1]][[11]][[2]][[2]]
y = xx[[1]][[11]][[2]][[3]]
z = xx[[1]][[11]][[2]][[4]]
s = xx[[1]][[11]][[2]][[5]]
xt = rep(rep(x, each = length(y)), each = length(s))
yt = rep(rep(x, length(x)), each = length(s))
zt = rep(as.numeric(z), each = length(s))
st = rep(s, length(x) * length(y))
length(xt)
length(x)
length(x) * length(y)
(length(x) * length(y) - 1) * length(s)
(length(x) * length(y)) * (length(s) - 1)
xt[(length(x) * length(y)) * (length(s) - 1) : 8000]
xt
tail(xt)
(length(x) * length(y)) * (length(s) - 1) : 8000
xt[((length(x) * length(y)) * (length(s) - 1)) : 8000]
xi = ((length(x) * length(y)) * (length(s) - 1))
xi
ind = ((length(x) * length(y)) * (length(s) - 1))
xt = rep(rep(x, each = length(y)), each = length(s))[ind : 8000]
yt = rep(rep(x, length(x)), each = length(s))[ind : 8000]
zt = rep(as.numeric(z), each = length(s))[ind : 8000]
st = rep(s, length(x) * length(y))[ind : 8000]
xtop = xt[1:ind]
xbot = xt[(ind + 1): 8000]
length(xtop)
length(xbot)
xbot = xt[(400 + 1): 8000]
xtop = xt[1:ind]
xbot = xt[(400 + 1): 8000]
ytop = yt[1:ind]
ybot = yt[(400 + 1): 8000]
ztop = zt[1:ind]
zbot = zt[(400 + 1): 8000]
FindCutPoints(low, high, xtop, ytop, ztop, xbot, ybot, zbot)
low = 3; high = 4;
FindCutPoints(low, high, xtop, ytop, ztop, xbot, ybot, zbot)
library(gridGraphics)
library(gridGraphics)
testPersp = function(theta=120, phi = 20, expand = 0.5, col = 'White',
box = TRUE, border = 'orange',
ticktype = 'simple', nticks = 5, ...) {
x = seq(-10,10,length = 60)
y = seq(-10,10,length = 60)
f <- function(x, y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
z <- outer(x, y, f)
z[is.na(z)] <- 1
par(mar = c(2,2,2,2))
trans <- persp(x, y, z, theta = theta,
phi = phi, expand = expand,
col = col, box = box, border = border,
ticktype = ticktype, nticks = nticks, ...)
}
testPersp1 = function(theta=120, phi = 20, expand = 0.5, col = 'orange ',
box = TRUE, border = 'NA',
ticktype = 'simple', nticks = 5, ...) {
x = seq(-pi,pi,length = 45)
y = seq(-pi,pi,length = 45)
f <- function(x, y) { 1 + 3 * cos((x^2 + y^2) * 2) * exp(-(x^2 + y^2))}
z <- outer(x, y, f)
nrz <- nrow(z)
ncz <- ncol(z)
# color
jet.colors <- colorRampPalette( c("white",'yellow', "orange") )
nbcol <- 100
color <- jet.colors(nbcol)
zfacet <- z[-1, -1] + z[-1, -ncz] + z[-nrz, -1] + z[-nrz, -ncz]
facetcol <- cut(zfacet, nbcol)
par(mar = c(2,2,2,2))
expand = 0.5
trans <- persp(x, y, z, theta = theta,
phi = phi, expand = expand,
col = color[facetcol], box = box, border = border,
ticktype = ticktype, nticks = nticks, ...)
}
testPersp1()
testPersp1(shade = 0.5)
testPersp1(shade = 0.5, box = FALSE)
testPersp1 = function(theta=120, phi = 20, expand = 0.5, col = 'orange ',
box = TRUE, border = 'NA',
ticktype = 'simple', nticks = 5, ...) {
x = seq(-pi,pi,length = 45)
y = seq(-pi,pi,length = 45)
f <- function(x, y) { 1 + 3 * cos((x^2 + y^2) * 2) * exp(-(x^2 + y^2))}
z <- outer(x, y, f)
nrz <- nrow(z)
ncz <- ncol(z)
# color
jet.colors <- colorRampPalette( c('yellow') )
nbcol <- 100
color <- jet.colors(nbcol)
zfacet <- z[-1, -1] + z[-1, -ncz] + z[-nrz, -1] + z[-nrz, -ncz]
facetcol <- cut(zfacet, nbcol)
par(mar = c(2,2,2,2))
expand = 0.5
trans <- persp(x, y, z, theta = theta,
phi = phi, expand = expand,
col = color[facetcol], box = box, border = border,
ticktype = ticktype, nticks = nticks, ...)
}
testPersp1(shade = 0.5, box = FALSE)
testPersp1(shade = 0.5, box = FALSE, ltheta = 0)
testPersp1(shade = 0.5, box = FALSE)
testPersp1(shade = 0.5, box = FALSE, ltheta = 0)
testPersp1(shade = 0.5, box = FALSE, ltheta = 0, lphi = 90)
testPersp1(shade = 0.5, box = FALSE, ltheta = 0, lphi = 40)
testPersp1(shade = 0.5, box = FALSE, ltheta = 0, lphi = 45)
testPersp1(shade = 0.5, box = FALSE, ltheta = 0, lphi = 0)
testPersp1(shade = 0.5, box = FALSE, ltheta = 0, lphi = 10)
testPersp1(shade = 0.5, box = FALSE, ltheta = 0, lphi = 15)
testPersp1(shade = 0.5, box = TRUE, ltheta = 0, lphi = 15)
testPersp1(shade = 0.5, box = TRUE, ltheta = 0, lphi = 0)
testPersp1(shade = 0.7, box = TRUE, ltheta = 0, lphi = 0)
testPersp1 = function(theta=120, phi = 20, expand = 0.5, col = 'orange ',
box = TRUE, border = 'NA',
ticktype = 'simple', nticks = 5, ...) {
x = seq(-pi,pi,length = 45)
y = seq(-pi,pi,length = 45)
f <- function(x, y) { 1 + 3 * cos((x^2 + y^2) * 2) * exp(-(x^2 + y^2))}
z <- outer(x, y, f)
nrz <- nrow(z)
ncz <- ncol(z)
# color
jet.colors <- colorRampPalette( c('white') )
nbcol <- 100
color <- jet.colors(nbcol)
zfacet <- z[-1, -1] + z[-1, -ncz] + z[-nrz, -1] + z[-nrz, -ncz]
facetcol <- cut(zfacet, nbcol)
par(mar = c(2,2,2,2))
expand = 0.5
trans <- persp(x, y, z, theta = theta,
phi = phi, expand = expand,
col = color[facetcol], box = box, border = border,
ticktype = ticktype, nticks = nticks, ...)
}
testPersp1(shade = 0.7, box = TRUE, ltheta = 0, lphi = 0)
testPersp1(shade = 0.7, box = TRUE, ltheta = 0, lphi = 90)
testPersp1(shade = 0.7, box = TRUE, ltheta = 0, lphi = 50)
testPersp1(shade = 0.7, box = TRUE, ltheta = 0, lphi = 0)
testPersp1(shade = 0.7, box = TRUE, ltheta = 60, lphi = 0)
testPersp1(shade = 0.7, box = TRUE, ltheta = 0, lphi = 0)
testPersp1(shade = 0.7, box = TRUE, ltheta = 10, lphi = 0)
testPersp1(shade = 0.7, box = TRUE, ltheta = 30, lphi = 0)
testPersp1(shade = 0.7, box = TRUE, ltheta = 40, lphi = 0)
testPersp1(shade = 0.7, box = TRUE, ltheta = 50, lphi = 0)
testPersp1(shade = 0.7, box = TRUE, ltheta = 10, lphi = 0)
testPersp1(shade = 0.7, box = TRUE, ltheta = 90, lphi = 0)
testPersp1(shade = 0.7, box = TRUE, ltheta = 1000, lphi = 0)
testPersp1(shade = 0.7, box = TRUE, ltheta = 90, lphi = 0)
testPersp1(shade = 0.7, box = TRUE,theta = 30, ltheta = 90, lphi = 0)
testPersp1(shade = 0.7, box = TRUE,theta = 0, ltheta = 90, lphi = 0)
testPersp1(shade = 0.7, box = TRUE,theta = 0, ltheta = 0, lphi = 0)
testPersp1(shade = 0.7, box = TRUE,theta = 30, ltheta = 0, lphi = 0)
source('C:/Users/yeamin/Desktop/mproject/gridGraphics_script/loading.R')
C_persp
?persp
windows()
cols = rgb(0.5, 1,1,alpha = 0.5)
cols
plot(1,1 col = cols)
plot(1,1, col = cols)
plot(1,1)
plot(1,1, pch = 19)
plot(1,1, pch = 19, col = cols)
points(0.5, 0.5, col = rgb(0.5, 1,1))
graphics:::points(0.5, 0.5, col = rgb(0.5, 1,1))
graphics:::points(0.8, 0.8, col = rgb(0.5, 1,1))
graphics:::points(0.8, 0.8, col = rgb(0.5, 1,1), pch = 19)
testPersp
testPersp(col = cols)
grid.echo()
library(grid)
grid.echo()
testPersp()
grid.echo()
testPersp(col = cols, border = 'NA')
grid.echo()
cols = rgb(c(0.5, 0.2), 1,1 alpha = c(0.5, 2))
cols = rgb(c(0.5, 0.2), 1,1, alpha = c(0.5, 0.2))
cols
testPersp(col = cols, border = 'NA')
grid.echo()
plotdiff(expression('testPersp(col = cols, border = 'NA')'), 'persp-11')
plotdiff(expression('testPersp(col = cols, border = 'NA'))', 'persp-11')
plotdiff(expression('testPersp(col = cols, border = 'NA')'), 'persp-11')
plotdiff(expression(testPersp(col = cols, border = 'NA')), 'persp-11')
getwd()
testPersp(col = cols, border = 'NA', shade = 0.5)
testPersp(col = cols, border = 'NA', shade = 0.9)
testPersp(col = 1, border = 'NA', shade = 0.9)
testPersp(col = 2, border = 'NA', shade = 0.9)
testPersp(col = 2, border = 'NA', shade = 0.9)
grid.echo()
testPersp(col = 2, border = 'NA', shade = c(0.9, 0.5))
testPersp(col = 2, border = 'NA', shade = c(0.9, 0.1))
testPersp(col = 2, border = 'NA', shade = c(0.1, 0.1))
testPersp(col = 2, border = 'NA', shade = c(0.2, 0.1))
testPersp(col = cols, border = 'NA', shade = c(0.2, 0.1))
?persp
testPersp(col = 3, border = 'NA', shade = c(0.2, 0.1))
testPersp(col = 4, border = 'NA', shade = c(0.2, 0.1))
testPersp(col = 5, border = 'NA', shade = c(0.2, 0.1))
testPersp(col = 5, border = 'NA', shade = c(1, 0.1))
testPersp(col = 5, border = 'NA', shade = c(2, 0.1))
testPersp(col = 5, border = 'NA', shade = c(3, 0.1))
grid.echo()
warnings()
testPersp(col = cols, border = 'NA', shade = c(3, 0.1))
testPersp(col = 5, border = 'NA', shade = c(3, 0.1))
testPersp(col = 5, border = 'NA', shade = 1)
testPersp(col = 5, border = 'NA', shade = 1, ltheta = 0)
testPersp(col = 5, border = 'NA', shade = 1, ltheta = 180)
testPersp(col = 5, border = 'NA', shade = 1, ltheta = 180, lphi = 0)
testPersp(col = 5, border = 'NA', shade = 1, ltheta = 180, lphi = 90)
testPersp(col = 5, border = 'NA', shade = 1, ltheta = 180, lphi = 90, theta = 30)
testPersp(col = 5, border = 'NA', shade = 1, ltheta = 180, lphi = 90, theta = 60)
testPersp(col = 5, border = 'NA', shade = 1, ltheta = 180, lphi = 90, theta = 90)
testPersp(col = 5, border = 'NA', shade = 1, ltheta = 90, lphi = 90, theta = 90)
testPersp(col = 5, border = 'NA', shade = 1, ltheta = 90, lphi = 0, theta = 90)
testPersp(col = 5, border = 'NA', shade = 1, ltheta = 90, lphi = 0, theta = 90, phi = 0)
testPersp(col = 5, border = 'NA', shade = 1, ltheta = 90, lphi = 0, theta = 90, phi = 30)
testPersp(col = 5, border = 'NA', shade = 1, ltheta = 90, lphi = 30, theta = 90, phi = 30)
testPersp(col = 5, border = 'NA', shade = 1, ltheta = 0, lphi = 30, theta = 0, phi = 30)
install.packages('gridGraphics')
install.packages("gridGraphics")
demo('persp')
winodws()
windows()
demo('persp')
grid.echo()
library(grid)
grid.echo()
demo('persp')
grid.echo()
edmo(filled.contour())
demo(filled.contour())
library(plotly)
p <- plot_ly(z = ~volcano, type = "contour")
chart_link = plotly_POST(p, filename="contour/basic")
chart_link
p
plot(p)
x <- y <- 1:10 # create two vectors with the integers from 1 to 10
z <- outer(x,y) # create a matrix as the outer product of the two vectors
my.seq <- seq(-pi, pi, length=50) # creating a vector as a sequence from 0 to 2*pi with 50 entries
my.seq2 <- seq(-0.5*pi, 1.5*pi, length=50) # creating a vector as a sequence from 0 to 2*pi with 50 entries
my.matrix <- outer(sin(my.seq),cos(my.seq2)) # creating the matrix using sin, cos and outer
filled.contour(x=my.seq, y=my.seq2,my.matrix, plot.title=title(main="Products Sin(x)*Cos(y) on [-Pi,Pi]x[-0.5Pi,1.5Pi]", xlab="x", ylab="y"), key.title=title(main="products"), col=terrain.colors(20))
my.seq <- seq(-pi, pi, length=50) # creating a vector as a sequence from 0 to 2*pi with 50 entries
my.seq2 <- seq(-0.5*pi, 1.5*pi, length=50) # creating a vector as a sequence from 0 to 2*pi with 50 entries
my.matrix <- outer(sin(my.seq),cos(my.seq2)) # creating the matrix using sin, cos and outer
filled.contour(x=my.seq, y=my.seq2,my.matrix, plot.title=title(main="Products Sin(x)*Cos(y) on [-Pi,Pi]x[-0.5Pi,1.5Pi]", xlab="x", ylab="y"), key.title=title(main="products"), col=terrain.colors(20))
winodws()
my.seq <- seq(-pi, pi, length=50) # creating a vector as a sequence from 0 to 2*pi with 50 entries
my.seq2 <- seq(-0.5*pi, 1.5*pi, length=50) # creating a vector as a sequence from 0 to 2*pi with 50 entries
my.matrix <- outer(sin(my.seq),cos(my.seq2)) # creating the matrix using sin, cos and outer
filled.contour(x=my.seq, y=my.seq2,my.matrix, plot.title=title(main="Products Sin(x)*Cos(y) on [-Pi,Pi]x[-0.5Pi,1.5Pi]", xlab="x", ylab="y"), key.title=title(main="products"), col=terrain.colors(20))
windows()
my.seq <- seq(-pi, pi, length=50) # creating a vector as a sequence from 0 to 2*pi with 50 entries
my.seq2 <- seq(-0.5*pi, 1.5*pi, length=50) # creating a vector as a sequence from 0 to 2*pi with 50 entries
my.matrix <- outer(sin(my.seq),cos(my.seq2)) # creating the matrix using sin, cos and outer
filled.contour(x=my.seq, y=my.seq2,my.matrix, plot.title=title(main="Products Sin(x)*Cos(y) on [-Pi,Pi]x[-0.5Pi,1.5Pi]", xlab="x", ylab="y"), key.title=title(main="products"), col=terrain.colors(20))
grid.echo()
my.seq <- seq(-pi, pi, length=50) # creating a vector as a sequence from 0 to 2*pi with 50 entries
my.seq2 <- seq(-0.5*pi, 1.5*pi, length=50) # creating a vector as a sequence from 0 to 2*pi with 50 entries
my.matrix <- outer(sin(my.seq),cos(my.seq2)) # creating the matrix using sin, cos and outer
filled.contour(x=my.seq, y=my.seq2,my.matrix, plot.title=title(main="Products Sin(x)*Cos(y) on [-Pi,Pi]x[-0.5Pi,1.5Pi]", xlab="x", ylab="y"), key.title=title(main="products"), col=terrain.colors(20))
grid.echo()
x
my.seq
grid.ls()
grid.edit(gPath = 'GRID.polygon.51', gp = gpar(col = 'red'))
grid.edit(gPath = 'GRID.polygon.51', gp = gpar(fill = rgb(1, 0.2, 0.2, alpha = 0.5)))
rm(list =ls())
ls()
example("filled.contour")
windows()
example("filled.contour")
grid.echo()
library(gridGraphics)
grid.echo()
x <- y <- seq(-4*pi, 4*pi, len=27)
r <- sqrt(outer(x^2, y^2, "+"))
image(z = z <- cos(r^2)*exp(-r/6), col=gray((0:32)/32))
image(z, axes = FALSE, main = "Math can be beautiful ...",
xlab = expression(cos(r^2) * e^{-r/6}))
contour(z, add = TRUE, drawlabels = FALSE)
windows()
x <- y <- seq(-4*pi, 4*pi, len=27)
r <- sqrt(outer(x^2, y^2, "+"))
image(z = z <- cos(r^2)*exp(-r/6), col=gray((0:32)/32))
image(z, axes = FALSE, main = "Math can be beautiful ...",
xlab = expression(cos(r^2) * e^{-r/6}))
contour(z, add = TRUE, drawlabels = FALSE)
grid.echo()
contour()
contour
contour()
contour.default()
contour.default
q()
